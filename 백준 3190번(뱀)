n = int(input())
k = int(input())

d = [[0] * n for _ in range(n + 1)]

for _ in range(k):
    i, j = map(int, input().split())
    d[i][j] = 1

cnt = int(input())

change = []

for _ in range(cnt):
    x, c = input().split()
    change.append((int(x), c))

dx = [0, 1, 0 ,-1]
dy = [1, 0 ,-1, 0]

def turn(direct, c):
  if c == 'L':
    direct = (direct - 1) % 4
  else:
    direct = (direct + 1) % 4
  return direct

def simulate():
  x, y = 1, 1
  d[x][y] = 2
  direct = 0
  time = 0
  index = 0
  q= [(x, y)]

  while True:
    nx = x + dx[direct]
    ny = y + dy[direct]

    if 1 <= nx and nx <= n and 1 <= ny and ny <= n and d[nx][ny] != 2:
      if d[nx][ny] ==0:
        d[nx][ny] = 2
        q.append((nx, ny))
        px, py =  q.pop(0)
        d[px][py] = 0

      if d[nx][ny] == 1:
        d[nx][ny] = 2
        q.append((nx, ny))
    else:
      time += 1
      break

    x, y = nx, ny
    time += 1

    if index < 1 and time == change[index][0]:
      direct = turn(direct, change[index][1])
      index += 1

  return time

print(simulate())
